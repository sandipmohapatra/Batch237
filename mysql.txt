https://dev.mysql.com/downloads/installer/
-------------------------------------------------------------------------------------------
https://github.com/sandipmohapatra/MLA237JavaSM
-------------------------------------------------------------------------------------------
Mysql notes
----------------------------------------------------
To see the databases
1)show databases;
-----------------------------------------------------
to create database
2)create database daimler;
--------------------------------------------------------
to goto the database
3)use daimler;
-------------------------------------------------------------------------------------------
to create table
create table student (rollno int, name varchar(30),address varchar(30));
---------------------------------------------------------------------------------------------
to insert data into the table
insert into student values(101,'sandip','Bangalore');
insert into student values(102,'Rohan','Bangalore');
-------------------------------------------------------------------------
 to view the data 
select * from student;
----------------------------------------------------------------------------
create table employee (empno int,name varchar(30),address varchar(30));
to add some more columns
alter table student add phy int;
alter table student add bio int;
alter table student add chem int;
alter table student add tot int;
alter table student add avg int;
update student set phy=88,chem=83,bio=74 where rollno=101;
update student set phy=78,chem=73,bio=84 where rollno=102;
update student set phy=68,chem=63,bio=64 where rollno=103;
update student set phy=78,chem=73,bio=84 where rollno=102;
update student set tot=phy+chem+bio ;
update student set avg=tot/3;
----------------------------------------------------------------------------
to delete a row
delete from student where rollno=101;
-----------------------------------------------------------------------------
to drop a table
drop table student;
----------------------------------------------------------------------------------
to drop a database
drop database Mphasis237;
--------------------------------------------------------------------------------------------
delete all the rows or data but the structure of the table will be there
truncate table student;
-------------------------------------------------------------------------------------------
to update a row
update student set address='pune' where rollno=101;
--------------------------------------------------------------------------------------------
Auto-Increment
----------------------------------
create table fare(id INT AUTO_INCREMENT ,fare varchar(25),flight_date varchar(25),flight_number varchar(25),primary key(id)) ;

*primary key :- if we declare the column as primary key then the column is unique and not null.
we cannot enter duplicate values nor we can leave the field empty.


insert into fare(fare,flight_date,flight_number) values('hyd-bang','12-jul-2024','air-207');

ALTER TABLE users MODIFY id INT NOT NULL AUTO_INCREMENT;
-----------------------------------------------------------------------------------------------------------
time stamp (2024-07-10 5:00)
---------------------------------------------------------
create table booking_record (id INT primary key AUTO_INCREMENT,
booking_date timestamp, 
destination VARCHAR(255), 
price VARCHAR(255), 
flight_date VARCHAR(255), 
flight_number VARCHAR(255),
origin VARCHAR(255), 
status VARCHAR(255));

insert into booking_record(booking_date,destination,price,flight_date,flight_number,origin,status) values('2024-07-10 5:00','Pune','Rs 5000','12-jul-2024','air-206','Hyd','yes');
---------------------------------------------------------------------------------------
CREATE TABLE Books (
    Book_Id INT PRIMARY KEY,
    Title VARCHAR(255) NOT NULL,
    ISBN VARCHAR(13) UNIQUE NOT NULL,
    Publication_year INT NOT NULL,
    Publisher_Id INT,
    Category_Id INT,
    Author_Name VARCHAR(255),
    CONSTRAINT fk_publisher
        FOREIGN KEY (Publisher_Id) REFERENCES Publishers(Publisher_Id)
        ON DELETE CASCADE,
    CONSTRAINT fk_category
        FOREIGN KEY (Category_Id) REFERENCES Categories(Category_Id)
        ON DELETE CASCADE,
    CONSTRAINT chk_author_name
        CHECK (Author_Name IS NOT NULL)
);

---------------------------------------------------------------------------------------
CREATE TABLE Categories (
    Category_Id INT PRIMARY KEY AUTO_INCREMENT,
    Category_Name VARCHAR(255) UNIQUE NOT NULL
);
--------------------------------------------------------------------------------------------------------
CREATE TABLE Publishers (
    Publisher_Id INT PRIMARY KEY AUTO_INCREMENT,
    Publisher_Name VARCHAR(255) NOT NULL
);
----------------------------------------------------------------------------------------------
CREATE TABLE Users (
    User_Id INT PRIMARY KEY ,
    Username VARCHAR(255) NOT NULL,
    Email VARCHAR(255) UNIQUE NOT NULL,
    Phone_Number VARCHAR(255) UNIQUE NOT NULL
);
-----------------------------------------------------------------------------------------------
CREATE TABLE Borrowings (
    Borrow_Id INT PRIMARY KEY ,
    User_Id INT,
    Book_Id INT,
    Borrow_Date DATE NOT NULL,
    Return_Date DATE NOT NULL,
    FOREIGN KEY (User_Id) REFERENCES Users(User_Id) ON DELETE CASCADE,
    FOREIGN KEY (Book_Id) REFERENCES Books(Book_Id) ON DELETE CASCADE
);
-------------------------------------------------------------------------------------------------------
create table customers(CustomerID INT PRIMARY KEY AUTO_INCREMENT,
CustomerName VARCHAR(255),	
ContactName	VARCHAR(255),
Address VARCHAR(255),
City	VARCHAR(255),
PostalCode VARCHAR(255),
Country VARCHAR(255));
------------------------------------------------------------------------------------------------------------
create table orders(OrderID INT PRIMARY KEY AUTO_INCREMENT,
CustomerID int,EmployeeID int,OrderDate date,ShipperID int);
---------------------------------------------------------------------------------------------------------------------
create table suppliers(SupplierID INT PRIMARY KEY AUTO_INCREMENT,
	SupplierName VARCHAR(255),
	ContactName	VARCHAR(255),
	Address VARCHAR(255),
	City VARCHAR(255),
	PostalCode VARCHAR(255),
	Country	VARCHAR(255),
	Phone VARCHAR(255));
----------------------------------------------------------------------------------------------------------------------

Wild character
-----------------------------------------------------------------------------------
CREATE TABLE student (
    Id INT PRIMARY KEY ,
    name VARCHAR(255) NOT NULL,
    Email VARCHAR(255) UNIQUE NOT NULL,
    Phone VARCHAR(255) UNIQUE NOT NULL
);
--------------------------------------------------------------------------------
select * from student where name like 's%';
-----------------------------------------------------------------------------------
select * from student where name like '%p';
---------------------------------------------------------------------
SELECT * FROM student WHERE Name LIKE 'a%';
-------------------------------------------------------------------------------
SELECT * FROM student WHERE Name LIKE '%a';
----------------------------------------------------------------------------------------------
SELECT * FROM student WHERE Name LIKE '%no%'
-------------------------------------------------------------------------------------------------
SELECT * FROM student WHERE Name LIKE '_o%';
-----------------------------------------------------------------------------------------------
SELECT * FROM student WHERE Name LIKE 'a%o';
----------------------------------------------------------------------------------------------
SELECT * FROM student WHERE Name LIKE 'a__%';
-----------------------------------------------------------------------------------------------
SELECT * FROM student WHERE Name NOT LIKE 'a%';
------------------------------------------------------------------------------------------------
To create a table
-------------------------------------------------------
create table student2
( studid int not null auto_increment,
name varchar(30) not null,
address varchar(30) not null,
primary key(studid)
);
----------------------------------------------------------------------------------
6)to insert record
insert into student values(101,'tarun','chennei');
-----------------------------------------------------------------------------------
7)to view the records 
select * from student;
-----------------------------------------------------------------------------------
8)update the record
update student set address='Bangalore' where name='tarun';
--------------------------------------------------------------------------
9)to create a view (view will not contain any data.it will contain only the query)
create view stud as select studid,name from student;
we can do insert,update and delete of the view it will reflect to the base table.
-------------------------------------------------------------------------------
10)to see all the tables and views
show tables;
----------------------------------------------------------------------
11)where condition :-
select * from student where name='tarun';
-------------------------------------------------------------------------
12)distinct :-(unique data will be displayed)
select distinct address from student;
-------------------------------------------------------------------------------
13)order by:-
select * from student order by name;
select * from student order by name asc;
select * from student order by name desc;
--------------------------------------------------------------------------------
14)group by
select address, count(*) from student group by address;
select address, sum(salary) from student group by address;
select address, min(salary) from student group by address;
select address, max(salary) from student group by address;
select address, avg(salary) from student group by address;
------------------------------------------------------------------------------
In group by we use having clause
-----------------------------------------------------
select address, sum(salary) from student group by address having sum(salary)>75000;
select address, avg(salary) from student group by address having avg(salary)>35000;
select address, min(salary) from student group by address having min(salary)>35000;
select address, max(salary) from student group by address having max(salary)>45000;
-----------------------------------------------------------------------------------
15)aggregate function
count(),sum(),avg(),min(),max(),first(),last()
---------------------------------------------------------------------
i)select count(*) from student;
first record  :- select name from student limit 1;
last record :-select name from student order by name desc limit 1;
--------------------------------------------------------------------------------------------
16)alter table:-
alter table student add salary int not null;
to add data to salary column :-
update student set salary=45000 where studid=101;
update student set salary=35000 where studid in (102,103,104);
---------------------------------------------------------------------------------
17)select sum(salary) from student;
18)select avg(salary) from student;
19)select min(salary) from student;
20)select max(salary) from student;
----------------------------------------------------------------------------------------------
between and example:-
21)select * from student where salary between 30000 and 46000;
----------------------------------------------------------------------------------------------
like % (wildcard)
----------------------------------------------------------------------------
22)select * from student where name like 'p%';(word starting with p will display)
select * from student where name like '%r';(word ending with r will display)
---------------------------------------------------------------------------
23)truncate table:-
it will delete all the data from the table.
truncate table student;
--------------------------------------------------------------------------- 
24)drop table;
it will delete the data as well as the table also.
drop table student;
-------------------------------------------------------------------------------

25)join
------------------------
create table marks
(studid int(4),
phy int(4),
chem int(4),
maths int(4),
tot int(4),avg int(4));

i)insert into marks(studid,phy,chem,maths) values(101,56,67,78);
ii)update marks set tot=(phy+chem+maths) where studid in (101,102,103);
iii)update marks set avg=tot/3 where studid in (101,102,103);
--------------------------------------

joining 2 tables:-
---------------------------
select a.studid,a.name,a.address,a.salary,b.phy,b.chem,b.maths,b.tot,b.avg from student a,marks b where a.studid=b.studid;
---------------------------------
composite KEY
--------------------------------
CREATE TABLE mphasisstudents
( studid INT NOT NULL AUTO_INCREMENT,
NAME VARCHAR(30) NOT NULL,
address VARCHAR(30) NOT NULL,
location VARCHAR(30) NOT NULL,
PRIMARY KEY(studid,NAME)
);

----------------------------------------------------------------------------------------
CREATE TABLE mphasisstudent
( studid INT NOT NULL AUTO_INCREMENT,
NAME VARCHAR(30) DEFAULT NULL UNIQUE,
address VARCHAR(30) DEFAULT NULL,
location VARCHAR(30) DEFAULT NULL,
PRIMARY KEY(studid,NAME)
);
-------------------------------------------------------------------------------------
clone as table
------------------------
CREATE TABLE persons5 AS SELECT * FROM persons4;
---------------------------------------------------------------------------------------
To see non duplicate values
SELECT DISTINCT id FROM persons4;
SELECT DISTINCT id,lastname,firstname,age FROM persons4;
--------------------------------------------------------------------------------------------
constraints 
---------------------------------------
NOT NULL - Ensures that a column cannot have a NULL value
UNIQUE - Ensures that all values in a column are different
PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table

FOREIGN KEY - It links between two tables
CHECK - Ensures that the values in a column satisfies a specific condition
DEFAULT - Sets a default value for a column if no value is specified
CREATE INDEX - Used to create and retrieve data from the database very quickly
-------------------------------------------------------------------------------------------------------------
CREATE TABLE Persons1 (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255) NOT NULL,
    Age int
);
----------------------------------------------------------------------------------
CREATE TABLE Persons2 (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    UNIQUE (ID)
);
---------------------------------------------------------------------
CREATE TABLE Persons3 (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT mphasis_emp UNIQUE (ID,LastName)
);
---------------------------------------------------------
101,'kumar'
101,'kumar'
-----------------------------------------
101,'Mohan'
102,'Kumar'

-------------------------------------------------------------------------------
ALTER TABLE Persons3
DROP INDEX mphasis_emp;
------------------------------------------------------------------------
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);
--------------------------------------------------------------------------
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)
);
-----------------------------------------------------------------------------
ALTER TABLE Persons
ADD PRIMARY KEY (ID);
-----------------------------------------------------------------------------
ALTER TABLE Persons
ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);
----------------------------------------------------------------------------------
ALTER TABLE Persons
DROP PRIMARY KEY;
-----------------------------------------------------------------------------------
Example of foreign key
-----------------------------------Master Table-------------------------------
CREATE TABLE bank(accno INT PRIMARY KEY,NAME VARCHAR(30) NOT NULL,address VARCHAR(30) UNIQUE, branch VARCHAR(30))
------------------------------------------------------------------------------------------
INSERT INTO bank VALUES(101,'sunil','Chennei','Karadi');
INSERT INTO bank VALUES(102,'Kiran','Pune', 'Karadi');
INSERT INTO bank VALUES(103,'sandip','Bangalore', 'Karadi');
-------------------------------------------------------------------------
SELECT * FROM bank;

--------------------------------------------------------------------------------------------------
child table
------------------------------
CREATE TABLE customer(accno INT,
bal INT NOT NULL,city VARCHAR(30) NOT NULL,
FOREIGN KEY (accno) REFERENCES bank(accno));
----------------------------------------------------------------------------------------
INSERT INTO customer VALUES(101,5000,'Pune');
INSERT INTO customer VALUES(101,3000,'Pune');
INSERT INTO customer VALUES(102,4000,'Bangalore');
INSERT INTO customer VALUES(102,2000,'Pune');
----------------------------------------------------------------------------------------------
SELECT * FROM customer;
----------------------------------------------------------------------------------------------------
delete from bank where accno=102

Error Code: 1451
Cannot delete or update a parent row: a foreign key constraint fails (`mphasis237`.`customer`, CONSTRAINT `customer_ibfk_1` FOREIGN KEY (`accno`) REFERENCES `bank` (`accno`))
------------------------------------------------------------------------------
ON DELETE CASCADE :If we delete the parent data the child referred data will be automatically deleted.

if we don't use on delete cascade it will give error message 
and will not able to delete as in the child table the referred data will be present.
Error Code: 1451
Cannot delete or update a parent row: a foreign key constraint fails (`mphasis237`.`customer`, CONSTRAINT `customer_ibfk_1` FOREIGN KEY (`accno`) REFERENCES `bank` (`accno`))
-------------------------------------------------------------------------------------------
CREATE TABLE bank(accno INT PRIMARY KEY,NAME VARCHAR(30) NOT NULL, address VARCHAR(30) UNIQUE, branch VARCHAR(30))

INSERT INTO bank VALUES(103,'sunil','Chennei','Karadi');
SELECT * FROM bank;

DELETE FROM bank WHERE accno=102 ;

DROP TABLE customer;

CREATE TABLE customer(accno INT,
bal INT NOT NULL,city VARCHAR(30) NOT NULL,
FOREIGN KEY (accno) REFERENCES bank(accno)ON DELETE CASCADE);

INSERT INTO customer VALUES(102,4000,'Pune');

SELECT * FROM customer;
--------------------------------------------------------------------------------------------------------

CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
);
---------------------------------------------------------------------------------------
CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)
    REFERENCES Persons(PersonID)
);
-----------------------------------------------------------------------------
ALTER TABLE Orders
ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);
------------------------------------------------------------------------------------
ALTER TABLE Orders
ADD CONSTRAINT FK_PersonOrder
FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);
----------------------------------------------------------------------
ALTER TABLE Orders
DROP FOREIGN KEY FK_PersonOrder;
-------------------------------------------------------------------------------------
CREATE TABLE Persons10 (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age>=18)
);
---------------------------------------------------------------------
CREATE TABLE Persons11 (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Bangalore')
);
----------------------------------------------------------------------------
ALTER TABLE Persons
ADD CHECK (Age>=18);
------------------------------------------------------
ALTER TABLE Persons
ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Bangalore');
------------------------------------------------------------
ALTER TABLE Persons
DROP CHECK CHK_PersonAge;
--------------------------------------------------------------------------
CREATE TABLE Persons12 (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Bangalore'
);
-----------------------------------------------------------------
CREATE TABLE Orders1 (
    ID int NOT NULL,
    OrderNumber int NOT NULL,
    OrderDate TIMESTAMP DEFAULT (Current_date));
-----------------------------------------------
CREATE TABLE Orders1 (
    ID int NOT NULL,
    OrderNumber int NOT NULL,
    OrderDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
--------------------------------------------------------------------------------------
insert into orders(id,ordernumber) values(101,1001);
---------------------------------------------------------------------------------------------
ALTER TABLE Persons
ALTER City SET DEFAULT 'Bangalore';
------------------------------------------------------------------
ALTER TABLE Persons
ALTER City DROP DEFAULT;
-------------------------------------------------------------------------
CREATE INDEX idx_lastname
ON Persons (LastName);
-------------------------------------------------------------------------
CREATE INDEX idx_pname
ON Persons (LastName, FirstName);
---------------------------------------------------------------
ALTER TABLE table_name
DROP INDEX index_name;
----------------------------------------------------------------
SELECT COUNT(DISTINCT Country) FROM Customers;
----------------------------------------------------------------------------------------------
SELECT * FROM Customers
WHERE Country='India' AND City='Japan';
-------------------------------------------------------------------------------------------------
SELECT * FROM Customers
WHERE City='India' OR City='Japan';
--------------------------------------------------------------------------------------------
SELECT * FROM Customers
WHERE NOT Country='India';
-------------------------------------------------------------------------------------
SELECT * FROM Customers
WHERE Country='India' AND (City='Japan' OR City='China');
------------------------------------------------------------------------------------------------
SELECT * FROM Customers
WHERE NOT Country='India' AND NOT Country='Japan';
--------------------------------------------------------------------------------------------------
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL;
-----------------------------------------------------------------------------------------------
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL;
-------------------------------------------------------------------------------------
SELECT * FROM Customers LIMIT 3;
---------------------------------------------------------------------
SELECT * FROM Customers
WHERE Country='India'
LIMIT 3;
---------------------------------------------------------------------------
SELECT MIN(Price) AS SmallestPrice
FROM Products; 
-----------------------------------------------------------------
SELECT MAX(Price) AS LargestPrice
FROM Products;
------------------------------------------------------------------
SELECT COUNT(ProductID)
FROM Products;
------------------------------------------------------------------
SELECT AVG(Price)
FROM Products;
------------------------------------------------------
SELECT SUM(Quantity)
FROM OrderDetails;
-----------------------------------------------------------
SELECT * FROM Customers
WHERE Country IN ('India', 'Japan', 'China');
------------------------------------------------------------------------------
SELECT * FROM Customers
WHERE Country NOT IN ('India', 'Japan', 'China');
--------------------------------------------------------------------------------------
SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers);
------------------------------------------------------------------------------------------------
SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;
------------------------------------------------------------------------------
SELECT * FROM Products
WHERE Price NOT BETWEEN 10 AND 20;
---------------------------------------------------------------------------------


------------------------------End Of MySql-----------------------------------
JDBC
---------------
program-1
-------------------
package Day5;
import java.sql.*;
import java.util.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter studID,name,address");
	int studid=ob.nextInt();
	String name=ob.next();
	String address=ob.next();
			Class.forName("com.mysql.cj.jdbc.Driver");//driver will be loaded
		Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/daimler","root","1234");
		PreparedStatement st=con.prepareStatement("insert into student1 values(?,?,?)");
		st.setInt(1, studid);
		st.setString(2,name);
		st.setString(3,address);
		st.execute();
		System.out.println("row inserted");
		
		}
}
----------------------------------------------------------------------------------------------------------------------
program-2
-------------------
package Day5;
import java.sql.*;
import java.util.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno who's name,address you want to update");
	int rollno=ob.nextInt();
	String name=ob.next();
	String address=ob.next();
			Class.forName("com.mysql.cj.jdbc.Driver");
		Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/daimler","root","1234");
		PreparedStatement st=con.prepareStatement("update student1 set name=? ,address=? where  rollno=?");
		st.setString(1,name);
		st.setString(2,address);
		st.setInt(3, rollno);
		st.execute();
		System.out.println("row updated");
		
		}
}
--------------------------------------------------------------------------------------------
program-3
---------------------
package Day5;
import java.sql.*;
import java.util.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno to delete");
	int rollno=ob.nextInt();
			Class.forName("com.mysql.cj.jdbc.Driver");
		Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/daimler","root","1234");
		PreparedStatement st=con.prepareStatement("delete from student1 where  rollno=?");
		st.setInt(1, rollno);
		st.execute();
		System.out.println("row deleted");
				}
}
--------------------------------------------------------------------------------------------------------------
program-4
----------------
import java.sql.*;
import java.util.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
    	Class.forName("com.mysql.cj.jdbc.Driver");
		Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/daimler","root","1234");
		Statement st=con.createStatement();
		st.execute("insert into student1 values(101,'sandip','Bangalore')");
		System.out.println("row inserted");
				}}
--------------------------------------------------------------------------------------------------------
program-5
---------------------
package Day5;
import java.sql.*;
import java.util.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
    	Class.forName("com.mysql.cj.jdbc.Driver");
		Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/daimler","root","1234");
		Statement st=con.createStatement();
		st.execute("update student1 set name='sandeep' ,address='Pune' where rollno=101");
		System.out.println("row update");
				}}
--------------------------------------------------------------------------------------------------------
program-6
---------------------
package Day5;
import java.sql.*;
import java.util.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
    	Class.forName("com.mysql.cj.jdbc.Driver");
		Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/daimler","root","1234");
		Statement st=con.createStatement();
		st.execute("delete from student1 where rollno=101");
		System.out.println("row deleted");
				}}
---------------------------------------------------------------------------------------------------------------
Assignment-4
-------------------------
create a bank class having accno, name, balance,
insert data, update data or delete data from the table as per the requirement.
use case and switch or if and else 

sandipmohapatra2016@gmail.com
-------------------------------------------------------------------------------------------------









------------------------------------------Answer----------------------------------------------------
import java.sql.*;
import java.util.Scanner;
public class bank {
              public static void main(String[] args)throws Exception
              {
                             Scanner ob=new Scanner(System.in);
                             Class.forName("com.mysql.cj.jdbc.Driver");
                             Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/daimlertruck","root","1234");
                      System.out.println("enter 1 for inserting data into bank database");
                      System.out.println("enter 2 for updating data into bank database");
                      System.out.println("enter 3 for deleting data into bank database");
                        int ch=ob.nextInt();
                             int accno;
                             String bname;
                             float balance;
      if(ch==1)
                             {
                                   PreparedStatement st=con.prepareStatement("insert into bank values(?,?,?)");
                                   System.out.println("enter the account number ,name and balance");
                                   accno=ob.nextInt();
                                   bname=ob.next();
                                   balance=ob.nextFloat();
                                           st.setInt(1, accno);
                                           st.setString(2,bname);
                                           st.setFloat(3,balance);
                                           st.execute();
                                           System.out.println("row inserted");
                             }
        else if (ch==2)
                             {
  PreparedStatement st=con.prepareStatement("update bank set bname=? ,balance=? where  accno=?");
  System.out.println("enter the account number ,name and balance");
                                                    accno=ob.nextInt();
                                                    bname=ob.next();
                                           balance=ob.nextFloat();
                                                          st.setString(1,bname);
                                                          st.setFloat(2,balance);
                                                          st.setInt(3, accno);
                                                          st.execute();
                                                          System.out.println("row updated");
                             }
        else if(ch==3)
                                           {
                          PreparedStatement st =con.prepareStatement("delete from bank where accno=?");
                           System.out.println("enter the account number");
                                                          accno=ob.nextInt();
                                                          st.setInt(1,accno);          
                                               st.execute();
                                                          System.out.println("Row deleted");
                                           }
                             else
                                           {
                                                          System.out.println("invalid choice");
                                           }

              }

}
---------------------------------------------------------------------------------------------------------
program-7
--------------------
package Day6;
import java.sql.*;
public class JDBC1 
{
	public static void main(String[] args)throws Exception
	{
	    	Class.forName("com.mysql.cj.jdbc.Driver");
Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/daimlertruck","root","1234");
			Statement st=con.createStatement();
		//	st.execute("create table student1 (rollno int, name varchar(30),address varchar(30))");
		//	System.out.println("table created");
			st.execute("insert into student1 values(101,'sandip','Bangalore')");
			System.out.println("row inserted");

	}
}
-------------------------------------------------------------------------------------------------------------------------
program-8
----------------------
package Day6;
import java.sql.*;
import java.util.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter name,address");
	String name=ob.next();
	String address=ob.next();
			Class.forName("com.mysql.cj.jdbc.Driver");//driver will be loaded
		Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/daimlertruck","root","1234");
		PreparedStatement st=con.prepareStatement("insert into student3(name,address) values(?,?)");
		st.setString(1,name);
		st.setString(2,address);
		st.execute();
		System.out.println("row inserted");
			}}
-------------------------------------------------------------------------------------------










